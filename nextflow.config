// Parameters - can be overridden on the command line
params {
    // Main path configuration
    outdir = "/mnt/data/lumanman/result_20250504"              // Output directory
    tmp_dir = "/mnt/data/lumanman/tmp"                    // Temporary directory
    sif_dir = "/mnt/data/lumanman/sif"                    // SIF container directory
    db_dir = "/mnt/data/lumanman/db"                      // Database directory
    app_dir = "/mnt/data/lumanman/app"                    // Application directory
    
    // Input file configuration
    samplesheet = "/mnt/data/lumanman/samplesheet2.tsv"   // Sample sheet file
    
    // Reference genome configuration
    genome_build = "hg38"                                 // Genome build version
    hg38db = "${db_dir}/reference/hg38/hg38.fa"           // Reference genome file
    refseq_peptide = "${db_dir}/reference/Reference_protein_seq-RefSeq_ID.fasta"
    uniport_ref = "${db_dir}/uniport/reuniprot.fasta"     // UniProt reference for SNV analysis

    // ANNOVAR configuration
    annovar_path = "${app_dir}/annovar"                   // ANNOVAR installation directory
    annovar_db_path = "${app_dir}/annovar/humandb"        // ANNOVAR database directory
    
    // Resource configuration
    max_memory = "1000.GB"                                // Maximum memory allocation
    max_cpus = 200                                        // Maximum CPU cores
    max_time = "48.h"                                     // Maximum task runtime
    
    // Mass Spectrometry Database configuration
    combine_ms {
        ms_outdir = "${params.outdir}/MS_Database"        // MS database output directory
        crap_fasta = "${db_dir}/reference/crap.fasta"     // Common Repository of Adventitious Proteins
        uniprot_fasta = "${db_dir}/uniport/reuniprot.fasta" // UniProt reference database
        threads = 4                                       // Threads for database creation
        container = "${sif_dir}/python_3.6_bio.sif"       // Container for database creation
    }
    
    // MaxQuant configuration
    maxquant {
        container = "${sif_dir}/maxquant_2.0.3.0--py310hdfd78af_1.sif"     // MaxQuant container
        python_container = "${sif_dir}/python_3.6_bio.sif" // Python container for generating config
        version = "2.0.3.0"                               // MaxQuant version
        template_xml = "${db_dir}/maxquant/labelfree.xml" // Template XML file
        mqpar_dir = "${params.outdir}/MaxQuant/mqpar"     // Directory for mqpar XML files
        results_dir = "${params.outdir}/MaxQuant/results" // Directory for MaxQuant results
        msfolder = "/mnt/data/lumanman/msfolder"     // Scratch folder for MaxQuant
        threads = 32                                      // Threads for MaxQuant
        max_memory = "256.GB"                             // Maximum memory for MaxQuant
        max_time = "48.h"                                 // Maximum runtime for MaxQuant
        skip_run = false                                  // Skip running MaxQuant, just generate configs
    }
    
    // Tool container configuration
    fastp {
        container = "${sif_dir}/fastp_0.23.4.sif"
        threads = 30
        adapters_auto = true                              // Automatic adapter detection
        cut_front = true                                  // Cut low quality bases from front
        cut_tail = true                                   // Cut low quality bases from tail
        cut_window_size = 5                               // Sliding window size
        cut_mean_quality = 20                             // Sliding window quality threshold
        qualified_quality = 15                            // Qualified quality value
        unqualified_percent_limit = 40                    // Max percentage of unqualified bases
        n_base_limit = 5                                  // Max number of N bases
        min_length = 50                                   // Minimum read length after filtering
    }
    
    star_fusion {
        container = "${sif_dir}/star-fusion_1.14.0--hdfd78af_2.sif"
        genome_lib_dir = "${db_dir}/star-fusion/GRCh38_gencode_v22_CTAT_lib_Mar012021.plug-n-play/ctat_genome_lib_build_dir"
    }
    
    kallisto {
        container = "${sif_dir}/kallisto_0.51.1--ha4fb952_1.sif"
        transcriptome_fasta = "${db_dir}/reference/hg38cdna/Homo_sapiens.GRCh38.cdna.all.fa"
        index_file = "${db_dir}/reference/hg38cdna/h38.cdna.idx"
        index_name = "h38.cdna.idx"
        bootstrap_samples = 100
        gene_transcript_map="${db_dir}/reference/Tran_id_gene.txt"
    }
    
    optitype {
        container = "${sif_dir}/optitype_latest.sif"
        hla_reference_rna = "${app_dir}/OptiType/data/"
        samtools_container = "${sif_dir}/samtools_1.3.1--h60f3df9_12.sif"
    }
    
    hlaminer {
        path = "${app_dir}/HLAminer/HLAminer-1.4/bin/"
        database_bwamem = "${app_dir}/HLAminer/HLAminer-1.4/database_bwamem/"
        database = "${app_dir}/HLAminer/HLAminer-1.4/database/"
        threads = 30
    }
    
    bwa {
        container = "${sif_dir}/bwa_0.7.19--h577a1d6_0.sif"
        threads = 60
    }
    
    samtools { container = "${sif_dir}/samtools_1.3.1--h60f3df9_12.sif" }
    
    gatk {
        container = "${sif_dir}/gatk4_4.6.1.0--py310hdfd78af_0.sif"
        read_groups {
            id = "4"
            library = "lib1"
            platform = "illumina"
            platform_unit = "unit1"
        }
        known_sites {
            dbsnp = "${db_dir}/dbsnp_146/dbsnp_146.hg38.vcf"
            mills_1000g = "${db_dir}/reference/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz"
        }
    }
    
    bcftools { container = "${sif_dir}/bcftools_1.21--h3a4d415_1.sif" }

    picard {          
        container = "${sif_dir}/picard_3.4.0--hdfd78af_0.sif"
        read_groups {
            library = "library1"
            platform = "illumina"
            platform_unit = "unit1"
        }
    }
    
    generate_pep {
        container = "${sif_dir}/python_3.6_bio.sif"
        threads = 4
    }
    
    snv_analysis {
        container = "${sif_dir}/python_3.6_bio.sif"  // Using the same Python container
        threads = 4
    }
}

// Include base configuration
includeConfig 'conf/base.config'

// Executor configuration
executor {
    $local {
        cpus = params.max_cpus
        memory = params.max_memory
        queueSize = 16                                    // Increase queue size for more parallel tasks
    }
    cleanup = false                                       // Keep work directories for failed tasks
}

// Manifest information
manifest {
    name = 'OmniNeo PIPELINE v1.0'
    author = 'Linfeng Xu'
    homePage = 'https://github.com/yourusername/pipeline'
    description = 'A pipeline for integrated DNA and RNA sequencing analysis'
    mainScript = 'main.nf'
    version = '1.0.0'
    nextflowVersion = '>=21.10.0'
}

// Disable ANSI color in logs
ansi.enabled = false

// Process configuration
process {
    echo = false
    tag = { "${task.process} - ${task.hash}" }
    scratch = true                                        // Use temp directory for computation
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'finish' }
    maxRetries = 3
}

// Debug mode configuration
debug { enabled = true }
