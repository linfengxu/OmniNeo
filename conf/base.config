// conf/base.config

// 进程资源配置
process {
    // 默认资源配置
    cpus = { check_max( 10 * task.attempt, 'cpus' ) }
    memory = { check_max( 1000.GB * task.attempt, 'memory' ) }
    time = { check_max( 48.h * task.attempt, 'time' ) }
    
    // 错误处理策略
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
    maxErrors = '-1'
    
    // 进程标签资源配置
    withLabel:process_low {
        cpus = { check_max( 20 * task.attempt, 'cpus' ) }
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
        time = { check_max( 6.h * task.attempt, 'time' ) }
    }
    withLabel:process_medium {
        cpus = { check_max( 40 * task.attempt, 'cpus' ) }
        memory = { check_max( 400.GB * task.attempt, 'memory' ) }
        time = { check_max( 12.h * task.attempt, 'time' ) }
    }
    withLabel:process_high {
        cpus = { check_max( 120 * task.attempt, 'cpus' ) }
        memory = { check_max( 800.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time' ) }
    }
    
    // 特别针对GATK_MUTECT2_PAIRED的配置
    withName: 'GATK_MUTECT2_PAIRED' {
        cpus = { check_max( 160 * task.attempt, 'cpus' ) }
        memory = { check_max( 900.GB * task.attempt, 'memory' ) }
        time = { check_max( 48.h * task.attempt, 'time' ) }
    }
    errorStrategy = { task.exitStatus in [1,143,137,104,134,139] ? 'retry' : 'finish' }
       maxRetries = 3
}

// 配合环境配置
profiles {
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        singularity.runOptions = '--bind /home,/mnt'
    }
}

// 辅助函数
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "WARNING: Max memory '${params.max_memory}' not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "WARNING: Max time '${params.max_time}' not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "WARNING: Max cpus '${params.max_cpus}' not valid! Using default value: $obj"
            return obj
        }
    }
}